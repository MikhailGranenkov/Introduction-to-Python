# Задача 1.

# Даны два неупорядоченных набора целых чисел (может быть, с повторениями).
# Выдать без повторений в порядке возрастания все те числа, которые встречаются
# в обоих наборах.
# На вход подается 2 числа через пробел: n m
# n - кол-во элементов первого множества.
# m - кол-во элементов второго множества.
# Затем подаются элементы каждого множества через пробел в виде строки. !
# Писать input() не надо

# Пример

# На входе:

# var1 = '5 4' # количество элементов первого и второго множества
# var2 = '1 3 5 7 9' # элементы первого множества через пробел
# var3 = '2 3 4 5' # элементы второго множества через пробел
# На выходе:

# 3 5


# # Вариант 1

# # Получаем входные данные
# var1 = '5 4'  # количество элементов первого и второго множества
# var2 = '1 3 5 7 9'  # элементы первого множества через пробел
# var3 = '2 3 4 5'  # элементы второго множества через пробел

# n, m = map(int, var1.split())
# set1 = set(map(int, var2.split()))
# set2 = set(map(int, var3.split()))

# # Находим пересечение множеств и выводим уникальные элементы в порядке возрастания
# intersection = sorted(set1.intersection(set2))
# print(*intersection)

# # Вариант 2

# mol = [int(x) for x in var1.split()]
# n = mol[0]
# m = mol[1]
# set_1 = set()
# set_2 = set()
# list_1 = list()
# a = [int(x) for x in var2.split()]
# k = set(a)
# for i in k:
#    set_1.add(i)
# b = [int(x) for x in var3.split()]
# k1 = set(b)
# for i in k1:
#    set_2.add(i)
# lok = set_1 & set_2
# kool = list(lok)
# kool.sort()
# for i in kool:
#    print(i, end=' ')


# Задача 2.

# В фермерском хозяйстве в Карелии выращивают чернику.
# Черника растет на круглой грядке, и кусты черники высажены по окружности грядки.
# Каждый куст черники имеет урожайность, которая соответствует
# количеству ягод на этом кусте.
# Урожайность черничных кустов представлена в виде списка arr,
# где arr[i] - это урожайность (количество ягод) i-го куста.
# В фермерском хозяйстве внедрена система автоматического сбора черники.
# Эта система состоит из управляющего модуля и нескольких собирающих модулей.
# Каждый собирающий модуль может собрать ягоды с одного куста и с двух соседних кустов.
# Собирающий модуль находится перед определенным кустом, и он может выбирать,
# с какого куста начать сбор ягод.
# Ваша задача - написать программу, которая определит максимальное число ягод,
# которое может собрать один собирающий модуль за один заход, находясь перед
# некоторым кустом грядки.

# Входные данные:
# На вход программе подается список arr, где arr[i] (1 ≤ arr[i] ≤ 1000) - урожайность
# i-го куста черники. Размер списка не превышает 1000 элементов.

# Выходные данные:
# Программа должна вывести одно целое число - максимальное количество ягод,
# которое может собрать собирающий модуль, находясь перед некоторым кустом грядки.

# Пример использования На входе:
# arr = [5, 8, 6, 4, 9, 2, 7, 3]
# На выходе:
# 19


# # Вариант 1

# # Задан массив
# arr = [5, 8, 6, 4, 9, 2, 7, 3]
# # Начальное значение максимальной суммы
# max_sum = arr[0]
# # Выводим максималку
# # print('Максимальная сумма трех соседних чисел:', max_sum)
# # Перебираем массив от первого элемента до предпоследнего
# for i in range(1, len(arr) - 1):
#     # Сумма текущего элемента с двумя соседями
#     current_sum = arr[i] + arr[i - 1] + arr[i + 1]
#     # Обновляем максимальную сумму
#     if current_sum > max_sum:
#         max_sum = current_sum
#     # Выводим текущую сумму на экран
#     # print('Сумма текущих трех чисел:', current_sum)
# # Выводим максимальную сумму на экран
# print(max_sum)

# # Вариант 2
# arr_count = list()
# for i in range(len(arr) - 1):
#     arr_count.append(arr[i - 1] + arr[i] + arr[i + 1])
# arr_count.append(arr[-2] + arr[-1] + arr[0])

# # Вывод максимальной урожайности, которую может собрать собирающий модуль
# print(max(arr_count))

# # Вариант 3
# arr = [5, 8, 6, 4, 9, 2, 7, 3]
# arr_list = []
# for i in range(len(arr)):
#     mid = arr[i] + arr[i - 1] + arr[i - 2]
#     arr_list.append(mid)
# print((max(arr_list)))
